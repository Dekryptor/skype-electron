{
  "_args": [
    [
      {
        "raw": "localizer@git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
        "scope": null,
        "escapedName": "localizer",
        "name": "localizer",
        "rawSpec": "git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
        "spec": "https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
        "type": "git"
      },
      "/Volumes/ServerHD2/buildagent/workspace/347907/clients"
    ]
  ],
  "_from": "git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
  "_id": "localizer@0.0.1",
  "_inCache": true,
  "_location": "/localizer",
  "_phantomChildren": {
    "@types/lodash": "4.14.68"
  },
  "_requested": {
    "raw": "localizer@git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
    "scope": null,
    "escapedName": "localizer",
    "name": "localizer",
    "rawSpec": "git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
    "spec": "https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
    "type": "git"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f7a68749ec710ce015243b9fd10852da32",
  "_shasum": "09f6da8a33e36e5896531220fb42ac9b88278f98",
  "_shrinkwrap": null,
  "_spec": "localizer@git+https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer#831b55f",
  "_where": "/Volumes/ServerHD2/buildagent/workspace/347907/clients",
  "author": {
    "name": "Mark Davis",
    "email": "markda@microsoft.com"
  },
  "dependencies": {
    "@types/lodash": "^4.14.62",
    "@types/node": "^6.0.65",
    "assert": "^1.3.0",
    "lodash": "^4.17.4",
    "messageformat": "^0.3.1",
    "subscribableevent": "^0.0.2"
  },
  "description": "Localizer in TypeScript",
  "devDependencies": {
    "tslint": "^5.2.0",
    "tslint-microsoft-contrib": "^4.0.1",
    "typescript": "^2.2.0",
    "webpack": "2.3.3"
  },
  "gitHead": "831b55f7a68749ec710ce015243b9fd10852da32",
  "keywords": [
    "localizer"
  ],
  "license": "UNLICENSED",
  "main": "dist/Localizer.js",
  "name": "localizer",
  "optionalDependencies": {},
  "readme": "# Typescript Localizer\n\n## Introduction\n\nA Javascript/Typescript Localizer for managing the current locale/language and parsing locale strings from a localized string table for the current locale.\n\n\n## Getting Started\n### Configuration\nThe configuration object must be assigned before using any of the functions from this module, e.g. `setLocale`. By default this is unassigned.\n```typescript\nLocalizer.config = {\n    // Converts user input into a proper locale string. Could just pass through or call toLower.\n    normalizeLocale: (inputLocale: string) => {\n        return (inputLocale || '').toLowerCase();\n    };\n\n    // Gets the string table for the given locale. Note: This can return a new locale in case multiple locales map to the same table.\n    getLocaleInfoFromLocale: (normalizedLocale: string) => {\n        let newLocale: string;\n        // See the note in the string table format section below for why this is an `any`.\n        let localizedStringTable: any;\n        switch (normalizedLocale) {\n            case 'a-A':\n                newLocale = 'a-A';\n                localizedStringTable = require('strings/LocalizedStrings_a-A.json');\n                break;\n            case 'x-A':\n            case 'x-B':\n            case 'x-C':\n                newLocale = 'x-A';\n                localizedStringTable = require('strings/LocalizedStrings_x-A.json');\n                break;\n            default:\n                newLocale = 'en-US';\n                localizedStringTable = defaultStringTable;\n        }\n        return {\n            newLocale,\n            localizedStringTable\n        };\n    };\n\n    // The table with all known strings, used to fallback in case the current locale is missing that key.\n    defaultStringTable: require('strings/LocalizedStrings_en.json');\n};\n```\n\n### Initial locale\nThe locale needs to be set to some default before using any getter functions from this module, e.g. `getString`. It is recommended to use `setSystemLocale` (which calls `setLocale`) so `resetLocaleToSystem` can be used later.\n```typescript\nLocalizer.setSystemLocale(System.getLocale());\n```\n\n\n## Localized string table format\nThe format is generally a JSON object with string keys to string values. Nested objects effectively form namespaces. Within the format string, `{param}` (note: no spaces) is replaced with value of the parameter `'param'`. Use `{param, plural, =1{1 thing} =100{too many things} other{# things}}` to handle plural values. See [Formatting Messages](http://userguide.icu-project.org/formatparse/messages) for more details.\n\nIt is recommended to use comments on every string. The comment for `\"key\"` is `\"_key.comment\"`. Note the leading `\"_\"` and trailing `\".comment\"`. Keys with this format are removed and should not be avaliable in TypeScript/JavaScript.\n\nIt is also recommended to keep siblings alphabetized.\n```json\n{\n    \"Debug\": \"Debug menu\",\n    \"_Debug.comment\": \"The header for the Debug page\",\n    \"FirstRun\": \"This is simple, {name}\",\n    \"_FirstRun.comment\": \"The header including the {name} of the person for the Simple page shown on first run\",\n\n    \"Global\": {\n        \"Company\": \"Contoso\",\n        \"_Company.comment\": \"Name of company used throughout the UI to refer to this app, e.g. 'Greetings from Contoso!'\",\n        \"Labels\": {\n            \"Ok\": \"Ok\",\n            \"_Ok.comment\": \"Label for Ok button used in dialogs\",\n            \"Cancel\": \"Cancel\",\n            \"_Cancel\": \"Label for the cancel button used in dialogs\"\n        },\n    },\n\n    \"Greetings\": {\n        \"Welcome\": \"Hi {name}! {visitCount, plural, =1{This is your first time here} other{Welcome back}\",\n        \"_Welcome.comment\": \"Body of modal dialog show when the app is launched\",\n        \"Goodbye\": \"Bye {name} {emoji}\",\n        \"_Goodbye.comment\": \"Body of modal dialog show when the user is trying to exit the app\"\n    }\n}\n```\n```typescript\nconst debug = Localizer.getString(\"Debug\");\n\nconst firstRun = Localizer.getString(\"FirstRun\", { 'name': 'Foo' });\n\nconst okLable = Localizer.getString(\"Global.Labels.Ok\");\n```\n\n### TypeScript typeof table\nIt is generally bad practice to use `any` in TypeScript code. However, there are exceptions and this is one of the cases where `any` is the best answer.\n\n- It is common to use `require(\"file.json\")` to get the string table. Suppose you wanted to use a proper non-any type. You can either [1] let the default declaration of `require` return an `any` and then cast to the desired type, or [2] add an override for `.json` so it directly returns the desired type. In either case, TypeScript is just using the type you specified without any checking.\n\n- Keys can nest arbitrarily deep, so if the table has a non-any type then we need casts to use this structure: cast to a dictionary when traversing, and cast to string to use the key at the leaf.\n\n- `current[section]` or `_.map(current, ...)` works if `current` is an object or a string. So type-safety does not help catch these common bugs.\n\nThere is not much TypeScript can do for us here. At least the explicit `any` puts the dev reading it on high alert. `any` means there is no type-checking, and that is accurate in this case.\n\n\n## Example Usage\n``` jsx\nimport * as Localizer from 'localizer';\n\nLocalizer.config = { /* See config above */ }\n\nonLocaleInput = (userInput: string) => {\n    Localizer.setLocale(userInput);\n};\n\nconst language = Localizer.getLanguageFromLocale();\n\nconst str = Localizer.getString('Greetings.Welcome', { 'name': 'Foo', 'visitCount': 4 });\n\n// Note: the generic parameter is inferred as { id: number }, so the part.id below is type-safe.\nconst parts = Localizer.getParts('Greetings.Goodbye', { 'name': 'Foo', 'emoji': { id: 123 } });\nconst jsx = (\n    <Greeting>\n        { _.map(parts, part => _.isString(part) ? part : (<emoji id={ part.id } />)) }\n    </Greeting>\n);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://skype.visualstudio.com/DefaultCollection/SCC/_git/client-shared_skypex_localizer"
  },
  "scripts": {
    "build": "npm run tslint && tsc && node ./node_modules/webpack/bin/webpack.js --config config/webpack.localizer.config.js",
    "prepublish": "npm run tslint && tsc",
    "tslint": "tslint -r ./node_modules/tslint-microsoft-contrib ./src/**/*.ts"
  },
  "types": "dist/Localizer.d.ts",
  "version": "0.0.1"
}
