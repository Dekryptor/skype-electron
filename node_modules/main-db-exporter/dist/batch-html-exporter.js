"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require('path');
const fileUtils = require('./file-utils');
const html_formatter_1 = require('./html-formatter');
const batch_index_1 = require('./batch-index');
const db_exporter_1 = require('./db-exporter');
const formatter_context_1 = require('./formatter-context');
class BatchHtmlExporter {
    constructor(accounts, outputDir) {
        this.lastProgress = -1;
        if (!accounts) {
            throw new Error('accounts must be provided');
        }
        if (!outputDir) {
            throw new Error('outputDir must be provided');
        }
        this.accounts = accounts;
        this.outputDir = outputDir;
        this.accountsCount = this.accounts.length;
        this.progress = new Array(this.accountsCount);
        this.progress.fill(0);
        this.batchindex = new batch_index_1.BatchIndex(outputDir);
    }
    onProgress(callback) {
        if (typeof callback === 'function') {
            this.onProgressCallback = callback;
        }
    }
    export() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.accounts.map((account, index) => __awaiter(this, void 0, void 0, function* () {
                yield this.exportDatabase(account, index);
            })));
            this.batchindex.write();
        });
    }
    reportTotalProgress(index, progress) {
        if (!this.onProgressCallback) {
            return;
        }
        this.progress[index] = progress;
        let sum = this.progress.reduce((a, b) => a + b, 0);
        let totalProgress = Math.floor(sum / this.accountsCount);
        if (this.lastProgress !== totalProgress) {
            this.lastProgress = totalProgress;
            this.onProgressCallback(this.lastProgress);
        }
    }
    exportDatabase(account, index) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                try {
                    let accountOutputDirname = account.skypeName.replace(':', '#3a');
                    let accountOutput = path.join(this.outputDir, accountOutputDirname);
                    fileUtils.ensureDir(accountOutput);
                    let dbExporter = new db_exporter_1.DbExporter(account.dbPath);
                    let formatter = new html_formatter_1.HtmlFormatter();
                    formatter.init(accountOutput);
                    let progressCounter = 0;
                    this.reportTotalProgress(index, 0);
                    dbExporter.getConversationCount().then((convCountTotal) => {
                        dbExporter.eachConversation((conversation) => {
                            if (!conversation || !conversation.id) {
                                return;
                            }
                            let ctx = new formatter_context_1.FormatterContext(formatter, accountOutput, conversation);
                            conversation.maxTimestamp = 0;
                            dbExporter.eachMessage(conversation.id, (msg) => {
                                this.applyFormatter(ctx, msg, conversation);
                            }, () => {
                                ctx.conversationDone();
                                progressCounter++;
                                if (convCountTotal > 0) {
                                    let percent = Math.floor((progressCounter / convCountTotal) * 100);
                                    if (percent > 100) {
                                        percent = 100;
                                    }
                                    this.reportTotalProgress(index, percent);
                                }
                                if (progressCounter === convCountTotal) {
                                    ctx.lastConversationDone(dbExporter.getAccountInfo());
                                    this.batchindex.addEntry(account, accountOutput);
                                    dbExporter.done().then(() => {
                                        resolve();
                                    });
                                }
                            });
                        }, () => {
                        });
                    });
                }
                catch (err) {
                    reject(err);
                }
            });
        });
    }
    applyFormatter(ctx, msg, conversation) {
        const formattedMsg = ctx.formatter.formatMessage(msg);
        if (formattedMsg) {
            ctx.anyMessage = true;
            if (ctx.isFirst) {
                ctx.isFirst = false;
                ctx.output = ctx.formatter.createOutput(ctx.completeOutPath, conversation);
                conversation.messageCount = 1;
            }
            else {
                ctx.output.write(ctx.formatter.messageSeparator());
                conversation.messageCount += 1;
            }
            ctx.output.write(formattedMsg);
            conversation.maxTimestamp = Math.max(msg.timestamp, conversation.maxTimestamp);
        }
    }
}
exports.BatchHtmlExporter = BatchHtmlExporter;
